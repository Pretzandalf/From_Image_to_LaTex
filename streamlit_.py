import streamlit as st
from Main import Image_to_text
from PIL import Image
import multiprocessing as mp

# def run_inference(img_bytes):
#     from Main import Image_to_text
#     from PIL import Image
#     import io
#
#     # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ Image
#     image = Image.open(io.BytesIO(img_bytes))
#     image = image.convert("RGB")  # –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
#
#     text = Image_to_text(image)
#     return text

def trim_latex(text: str) -> str:
    start = text.find("\\")
    end = text.rfind("\\end{document}")
    if start == -1 or end == -1:
        return text
    return text[start:end + len("\\end{document}")]

st.markdown(
    """
    <style>
    .stApp {
        background: linear-gradient(135deg, #ee4c2c, #f9a825);
        font-family: "Segoe UI", sans-serif;
    }
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        border-radius: 20px;
    }
    .stButton>button {
        background-color: #4A90E2;
        color: white;
        border-radius: 12px;
        padding: 0.6em 1.2em;
        font-size: 16px;
        transition: 0.3s;
    }
    .stButton>button:hover {
        background-color: #357ABD;
        transform: scale(1.05);
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown(
    """
    <style>
    /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞ */
    div[data-testid="stSpinner"] > div > div > div {
        font-size: 20px !important;  /* —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ */
        font-weight: bold;
        color: #333;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ LaTeX")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ **LaTeX**.")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="üñºÔ∏è –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    # with st.spinner(" –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
    #     # —á–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    #     img_bytes = uploaded_file.getvalue()
    #
    #     # –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    #     ctx = mp.get_context("spawn")
    #     with ctx.Pool(1) as pool:
    #         text = pool.apply(run_inference, (img_bytes,))
    #
    #     text = trim_latex(text)

    with st.spinner("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
        text = Image_to_text(image)
        text = trim_latex(text)

    # --- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à LaTeX –∫–æ–¥ –Ω–∏–∂–µ:")

    st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ LaTeX", text, height=1000)

    # try:
    #     st.latex(text)
    # except:
    #     st.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å LaTeX, –Ω–æ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã—à–µ.")

    # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ---
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (.txt)",
        data=text,
        file_name="result_text_Latex.txt",
    )
